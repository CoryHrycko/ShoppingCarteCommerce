{"version":3,"sources":["actions/cart.js","components/shelf.js","components/cart.js","App.js","serviceWorker.js","store.js","reducers/index.js","reducers/cart.js","index.js"],"names":["addToCart","item","console","log","type","Shelf","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickAdd","bind","assertThisInitialized","state","shelfItems","react_default","a","createElement","src","addItem","_this2","map","idx","key","onClick","className","Component","Cart","CartItems","cart","shelf","action","connect","prop","dispatch","bindActionCreators","CartActions","App","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","arguments","length","undefined","payload","toConsumableArray","concat","StoreInstance","createStore","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27d02487.chunk.js","sourcesContent":["export const addToCart = (item)=>{\r\n    console.log(\"adding item\", item);\r\n    return {\r\n        type: 'add',\r\n        item\r\n    };\r\n}","import React, { Component } from 'react';\r\n\r\nclass Shelf extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.onClickAdd = this.onClickAdd.bind(this);\r\n        this.state = {\r\n            shelfItems: [\r\n                'Website Development ' +<img src=\"\" />,\r\n                'Programing',\r\n                'SEO'\r\n                \r\n            ]\r\n        }\r\n    }\r\n\r\nonClickAdd(item){\r\n    this.props.addItem(item);\r\n}\r\n\r\nrender() {\r\n    const shelfItems = this.state.shelfItems.map((item,idx)=>{\r\n        return <li key={idx}><button onClick={()=>this.onClickAdd(item)}>{item}</button></li>\r\n    }); \r\n    return (\r\n        <div>\r\n            <h2>Shelf</h2>\r\n            <ul className='orders'>\r\n                {shelfItems}\r\n            </ul>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Shelf;\r\n","import React, { Component } from 'react';\nimport { bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport * as CartActions from '../actions/cart';\nimport Shelf from './shelf';\n\nclass Cart extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n\n    }\n  }\n\n  render() {\n    console.log(this.props);\n    const CartItems = this.props.cart.map((item, idx)=>{\n        return <li key={idx}>{item}</li>\n    })\n    return (\n      <div className=\"Cart\">\n        <Shelf addItem={this.props.action.addToCart} />\n        <div className='mainCart'>\n        <h2> Cart Items</h2>\n        <ol>\n          {CartItems}\n        </ol>\n      </div></div>\n    );\n  }\n}\n\n\n\n\n\nfunction mapStateToProps(state, prop){\n  return{\n    cart: state.cart\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return{\n    action: bindActionCreators(CartActions, dispatch)\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Cart from './components/cart';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n         <h2>Welcome</h2>\n         </div>\n        <div className=\"App-intro\">\n           <Cart />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nexport default(initialState)=>{\r\n    return createStore(rootReducer, initialState);\r\n}\r\n\r\n\r\n","import cart from './cart.js';\r\nimport {combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    cart\r\n});\r\n\r\nexport default rootReducer;","export default(state = [], payload)=> {\r\n    switch(payload.type){\r\n        case 'add':\r\n            return [...state, payload.item];\r\n        default:\r\n            return state;\r\n    }\r\n}; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './CSS/my.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport{ Provider} from 'react-redux';\nimport Store from './store';\n\nconst StoreInstance = Store();\n\n\nReactDOM.render(\n<Provider store = {StoreInstance}>\n<App />\n</Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}